##########################################################################################
#     _                    _ ______ _ _       
#    | |                  | (_____ (_) |      
#     \ \   ____ ____   _ | |_____) )| | ____ 
#      \ \ / _  |  _ \ / || |  ____/ | |/ _  )
#  _____) | ( | | | | ( (_| | |    | | ( (/ / 
# (______/ \_||_|_| |_|\____|_|    |_|_|\____)
#                                              
##########################################################################################
# 
# SandPile simulator, the prototypical toys of theoretical physicists to study self-
# organised criticality. 
#
# The code falls under the Lesser General Public License (LGPL GNU v3).

# Author:	 Anne C. van Rossum (Almende B.V.)
# Date: 	 Oct 28, 2010
#
# ASCII Art generated by: http://www.network-science.de/ascii/ with font "stop".
#
# Copyright Â© 2010 Anne van Rossum <anne@almende.com>
##########################################################################################

IF(WIN32)
cmake_minimum_required(VERSION 2.6)
ELSE(WIN32)
cmake_minimum_required(VERSION 2.4)
ENDIF(WIN32)

# The directory with all the FindXXX modules
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")

# The macro below forces the build directory to be different from source directory:
INCLUDE( MacroEnsureOutOfSourceBuild )
MACRO_ENSURE_OUT_OF_SOURCE_BUILD(
	"${PROJECT_NAME} requires an out of source build."
)

# Main binary name
SET(PROJECT_NAME "SandPile")
SET(SETUP_NAME "Setup")
SET(TESTFLOCKING_NAME "TestFlocking")
SET(TESTORDER_NAME "TestOrder")

# Start a project.
PROJECT(${PROJECT_NAME})

# Find packages
FIND_PACKAGE(Boost REQUIRED COMPONENTS filesystem serialization program_options system)
FIND_PACKAGE(PLplot REQUIRED)

# Header files
INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${PLplot_INCLUDE_DIR})

# Shared libraries
SET(LIBS ${LIBS} ${Boost_LIBRARIES})
SET(LIBS ${LIBS} ${PLplot_cxx_LIBRARY})

# Some debug information
MESSAGE("${PROJECT_NAME} is using CXX flags: ${CMAKE_CXX_FLAGS}")
MESSAGE ("Libraries included: ${LIBS}")

# Search for source code.
FILE(GLOB all_source src/*.cpp src/*.cc src/*.c)
FILE(GLOB main_header inc/*.h inc/*.hpp test/*.h)

# For main_source remove "Setup.cpp" file
string( REGEX REPLACE "Setup.cpp" "" main_source "${all_source}" )

# For main_source remove "Main.cpp" file
string( REGEX REPLACE "Main.cpp" "" setup_source "${all_source}" )

# For all test files remove "Setup.cpp" and "Main.cpp"
string( REGEX REPLACE "src/Main.cpp" "test/${TESTFLOCKING_NAME}.cpp" test_flocking_source "${main_source}" )
string( REGEX REPLACE "src/Main.cpp" "test/${TESTORDER_NAME}.cpp" test_order_source "${main_source}" )

SOURCE_GROUP("Source files for SandPile" FILES ${main_source})
SOURCE_GROUP("Source files for SandPile setup" FILES ${setup_source})
SOURCE_GROUP("Source files for Flocking test" FILES ${test_flocking_source})
SOURCE_GROUP("Source files for Order test" FILES ${test_order_source})
SOURCE_GROUP("Header Files" FILES ${main_header})

# Automatically add include directories if needed.
FOREACH(header_file ${main_header})
  GET_FILENAME_COMPONENT(p ${header_file} PATH)
  INCLUDE_DIRECTORIES(${p})
ENDFOREACH(header_file ${main_header})

# Testing
# enable_testing()
# add_subdirectory(harness)

# Set up our main executable.
IF (main_source)
   MESSAGE ("Build main source with ${main_source}")
   ADD_EXECUTABLE(${PROJECT_NAME} ${main_source} ${main_header})
   TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBS})
   install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION bin)   
ELSE (main_source)
    MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ENDIF (main_source)

IF (setup_source)
   ADD_EXECUTABLE(${SETUP_NAME} ${setup_source} ${main_header})
   TARGET_LINK_LIBRARIES(${SETUP_NAME} ${LIBS})
   install(TARGETS ${SETUP_NAME} RUNTIME DESTINATION bin)   
ELSE (setup_source)
    MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ENDIF (setup_source)

IF (test_flocking_source)
   ADD_EXECUTABLE(${TESTFLOCKING_NAME} ${test_flocking_source} ${main_header})
   TARGET_LINK_LIBRARIES(${TESTFLOCKING_NAME} ${LIBS})
   install(TARGETS ${TESTFLOCKING_NAME} RUNTIME DESTINATION bin)   
ELSE (main_source)
    MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ENDIF (test_flocking_source)

IF (test_order_source)
   #MESSAGE ("Build ${TESTORDER_NAME} with ${test_order_source}")
   ADD_EXECUTABLE(${TESTORDER_NAME} ${test_order_source} ${main_header})
   TARGET_LINK_LIBRARIES(${TESTORDER_NAME} ${LIBS})
   install(TARGETS ${TESTORDER_NAME} RUNTIME DESTINATION bin)   
ELSE (main_source)
    MESSAGE(FATAL_ERROR "No source code files found. Please add something")
ENDIF (test_order_source)
